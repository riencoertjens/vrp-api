<?php
function my_acf_google_map_api( $api ){
	$api['key'] = 'AIzaSyDujkg0Ss-J1rQFNy-J1B2S7sgcpdbjXek';
	return $api;
} add_filter('acf/fields/google_map/api', 'my_acf_google_map_api');


	function refreshSite($post_id){

		$post = get_post($post_id);

		if($post->post_type != 'registratie'){
			// Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
			//  TODO: add filter for post types
			$ch = curl_init();
			curl_setopt($ch, CURLOPT_URL, "https://api.netlify.com/build_hooks/5cbf26858b44e1d95d6e5624");
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
			curl_setopt($ch, CURLOPT_POST, 1);
			$headers = array();
			$headers[] = "Content-Type: application/x-www-form-urlencoded";
			$headers[] = "Content-length: 0";
			curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
			$result = curl_exec($ch);
			if (curl_errno($ch)) {
					error_log('Error:' . curl_error($ch));
			} else {
					error_log($result);
			}
			curl_close ($ch);
		}
} add_action( 'save_post', 'refreshSite', 8, 1 );



/**
 * Change WPForms capability requirement.
 *
 * @param string $cap
 * @return string
 */
function wpforms_custom_capability( $cap ) {

	// unfiltered_html by default means Editors and up.
	// See more about WordPress roles and capabilities
	// https://codex.wordpress.org/Roles_and_Capabilities
	return 'unfiltered_html';
}
add_filter( 'wpforms_manage_cap', 'wpforms_custom_capability' );

// create custom post type for 'registratie'
function registratie_cpt() {
	$args = array(
			'labels'  => array(
				'name' => 'registraties',
				'singular_name' => 'registratie',
			),
			'public' => true,
			// 'show_in_menu' => false
	);
	register_post_type( 'registratie', $args );

} add_action( 'init', 'registratie_cpt' );


// create sub menu page for registraties in activity tab
function my_menu() {
	add_submenu_page('edit.php?post_type=activity', 'Registraties', 'registraties', 'unfiltered_html', 'registraties', 'submissions_page_display' );
} add_action('admin_menu', 'my_menu');

// form submissions page
function submissions_page_display() {
	// if no activity is set, show all activities
	if (isset($_REQUEST['activity_id'])){

		$activity = get_post($_REQUEST['activity_id']);

		if( ! class_exists( 'Submissions_List_Table' ) ) {
			require_once( 'includes/submissions-list-table-class.php' );
		}

		$submissionsListTable = new Submissions_List_Table($activity->ID);
		$submissionsListTable->prepare_items();

		?>
			<div class="wrap">
				<h1>registraties: <a href="post.php?action=edit&post=<?=$activity->ID;?>"><?=$activity->post_title;?></a></h1>
				<a href="edit.php?post_type=activity&page=registraties">terug naar overzicht</a><br/>
				<!-- <a href="">exporteer csv</a> -->
				<?php $submissionsListTable->display(); ?>
				

			</div>
		<?php

	// if activity is set, show submissions
	} else {

		if( ! class_exists( 'Submissions_List_Table' ) ) {
			require_once( 'includes/submissions-overview-list-table-class.php' );
		}

		$submissionsOverviewListTable = new Submissions_Overview_List_Table();
		$submissionsOverviewListTable->prepare_items();

		?>
			<div class="wrap">
				<h1>registraties</h1>
				<!-- Now we can render the completed list table -->
				<?php $submissionsOverviewListTable->display(); ?>
			</div>
		<?php
	}

	
}

// 2. when adding a sub-menu page set the callback function to NULL and
// set the menu_slug to the appropriate custom post type url 
// (in this case it's edit.php?post_type=ttlm_team)
// add_submenu_page( 'ttlm', 'TTLM Teams', 'Teams', 'manage_options', 'edit.php?post_type=ttlm_team', NULL );


add_action('rest_api_init', function () {
	register_rest_route( 'vrp-api/v1', 'form-submission',array(
		'methods'  => WP_REST_Server::CREATABLE,
		'callback' => 'vrp_form_submission'
	));
});
function vrp_form_submission( WP_REST_Request $request ) {

	$json_data = $request->get_json_params();

	$activity = get_post($json_data['data']['activity_id']);
	
	$data = wp_slash(wp_json_encode($json_data['data']));
	
	$postarr = array(
		'post_title' => $json_data['email'],
		'post_date' => $json_data['created_at'],
		'post_content' => $data,
		'post_status' => 'publish',
		'post_type' => 'registratie',
		'comment_status' => 'closed'
	);
	
	$post_id = wp_insert_post($postarr, $wp_error);

	add_post_meta($post_id, 'activity_id', $activity->ID);

	$response = new WP_REST_Response($post_id);
	$response->set_status(200);

	return $response;
}






// foreach ($json_data['ordered_human_fields'] as $field) {
// 	if ($field['name'] !== "activity_id") {
// 		$tmp_form_id = explode("_",$field['name'])[0];
// 		$field_id = explode("_",$field['name'])[1];
// 		if (!isset($form) || $form_id != $tmp_form_id) {
// 			$form_id = $tmp_form_id;
// 			$form = get_post($form_id);
// 			error_log(json_encode(json_decode($form->post_content), JSON_PRETTY_PRINT));
// 		}
// 	}
// }